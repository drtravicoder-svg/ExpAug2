import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import '../../../core/theme/design_tokens.dart';
import '../../../core/utils/validators.dart';
import '../../../business_logic/providers/expense_providers.dart';
import '../../../business_logic/providers/trip_providers.dart';
import '../../../business_logic/providers/auth_providers.dart';
import '../../../data/models/expense.dart';
import '../../../data/models/trip.dart';
import '../../widgets/common/animated_card.dart';
import '../../widgets/common/animated_button.dart';
import '../../widgets/common/animated_input_field.dart';

class AddExpenseScreen extends ConsumerStatefulWidget {
  final String? tripId;

  const AddExpenseScreen({
    super.key,
    this.tripId,
  });

  @override
  ConsumerState<AddExpenseScreen> createState() => _AddExpenseScreenState();
}

class _AddExpenseScreenState extends ConsumerState<AddExpenseScreen> with TickerProviderStateMixin {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _amountController = TextEditingController();
  final _notesController = TextEditingController();

  String? _selectedCategory;
  String? _selectedTrip;
  Map<String, double> _splitBetween = {};
  List<String> _selectedMembers = [];
  File? _receiptImage;
  String? _location;
  bool _isLoading = false;

  late AnimationController _animationController;
  final ImagePicker _imagePicker = ImagePicker();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _selectedTrip = widget.tripId;
    _animationController.forward();
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _amountController.dispose();
    _notesController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _handleSubmit() async {
    if (!_formKey.currentState!.validate()) return;
    if (_selectedTrip == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a trip'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    try {
      final expenseRepository = ref.read(expenseRepositoryProvider);
      final currentUser = ref.read(currentUserProvider);

      if (currentUser == null) {
        throw Exception('User not authenticated');
      }

      // Create expense object
      final expense = Expense(
        id: '', // Will be generated by repository
        tripId: _selectedTrip!,
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim(),
        amount: double.parse(_amountController.text),
        categoryId: _selectedCategory!,
        paidBy: currentUser.id,
        splitBetween: _splitBetween.isNotEmpty ? _splitBetween : {currentUser.id: double.parse(_amountController.text)},
        receiptUrl: null, // TODO: Upload receipt if available
        status: ExpenseStatus.pending,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        approvedBy: [],
        rejectedBy: [],
        tags: [],
        location: _location,
        notes: _notesController.text.trim().isNotEmpty ? _notesController.text.trim() : null,
      );

      await expenseRepository.createExpense(expense);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Expense added successfully!'),
            backgroundColor: Colors.green,
          ),
        );
        context.pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to add expense: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _pickImage() async {
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.camera,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 80,
      );

      if (image != null) {
        setState(() {
          _receiptImage = File(image.path);
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to pick image: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _pickImageFromGallery() async {
    try {
      final XFile? image = await _imagePicker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 80,
      );

      if (image != null) {
        setState(() {
          _receiptImage = File(image.path);
        });
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to pick image: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showImagePickerOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.camera_alt),
              title: const Text('Take Photo'),
              onTap: () {
                Navigator.pop(context);
                _pickImage();
              },
            ),
            ListTile(
              leading: const Icon(Icons.photo_library),
              title: const Text('Choose from Gallery'),
              onTap: () {
                Navigator.pop(context);
                _pickImageFromGallery();
              },
            ),
            if (_receiptImage != null)
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Remove Receipt'),
                onTap: () {
                  Navigator.pop(context);
                  setState(() {
                    _receiptImage = null;
                  });
                },
              ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Expense'),
        backgroundColor: DesignTokens.primaryColor,
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            onPressed: () {
              // TODO: Show help or tips
            },
            icon: const Icon(Icons.help_outline),
          ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(DesignTokens.spacing16),
          children: [
            // Trip Selection (if not provided)
            if (widget.tripId == null) ...[
              AnimatedCard(
                child: Consumer(
                  builder: (context, ref, child) {
                    final allTrips = ref.watch(allTripsProvider);
                    return allTrips.when(
                      data: (trips) => DropdownButtonFormField<String>(
                        value: _selectedTrip,
                        decoration: const InputDecoration(
                          labelText: 'Select Trip',
                          prefixIcon: Icon(Icons.luggage),
                          border: OutlineInputBorder(),
                        ),
                        validator: (value) => Validators.required(value, fieldName: 'Trip'),
                        items: trips.map((trip) {
                          return DropdownMenuItem(
                            value: trip.id,
                            child: Text(trip.name),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() => _selectedTrip = value);
                        },
                      ),
                      loading: () => const LinearProgressIndicator(),
                      error: (_, __) => const Text('Error loading trips'),
                    );
                  },
                ),
              ),
              const SizedBox(height: DesignTokens.spacing16),
            ],

            // Title Field
            AnimatedInputField(
              controller: _titleController,
              labelText: 'Title',
              hintText: 'Expense title',
              prefixIcon: Icons.title,
              validator: (value) => Validators.required(value, fieldName: 'Title'),
              textInputAction: TextInputAction.next,
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Description Field
            AnimatedInputField(
              controller: _descriptionController,
              labelText: 'Description',
              hintText: 'What did you spend on?',
              prefixIcon: Icons.description,
              maxLines: 2,
              textInputAction: TextInputAction.next,
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Amount Field
            AnimatedInputField(
              controller: _amountController,
              labelText: 'Amount',
              hintText: '0.00',
              prefixIcon: Icons.attach_money,
              keyboardType: const TextInputType.numberWithOptions(decimal: true),
              validator: Validators.amount,
              textInputAction: TextInputAction.next,
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Category Dropdown
            AnimatedCard(
              child: DropdownButtonFormField<String>(
                value: _selectedCategory,
                decoration: const InputDecoration(
                  labelText: 'Category',
                  prefixIcon: Icon(Icons.category),
                  border: OutlineInputBorder(),
                ),
                validator: (value) => Validators.required(value, fieldName: 'Category'),
                items: _getCategories().map((category) {
                  return DropdownMenuItem(
                    value: category['id'],
                    child: Row(
                      children: [
                        Icon(category['icon'], size: 20, color: DesignTokens.primaryColor),
                        const SizedBox(width: DesignTokens.spacing8),
                        Text(category['name']),
                      ],
                    ),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() => _selectedCategory = value);
                },
              ),
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Location Field (Optional)
            AnimatedInputField(
              controller: TextEditingController(text: _location),
              labelText: 'Location (Optional)',
              hintText: 'Where was this expense?',
              prefixIcon: Icons.location_on,
              textInputAction: TextInputAction.next,
              onChanged: (value) => _location = value,
            ),
            const SizedBox(height: DesignTokens.spacing24),

            // Participants Section
            AnimatedCard(
              child: Padding(
                padding: const EdgeInsets.all(DesignTokens.spacing16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.people, color: DesignTokens.primaryColor),
                        const SizedBox(width: DesignTokens.spacing8),
                        Text(
                          'Split Between',
                          style: DesignTokens.headingSmall,
                        ),
                      ],
                    ),
                    const SizedBox(height: DesignTokens.spacing16),
                    if (_selectedTrip != null)
                      Consumer(
                        builder: (context, ref, child) {
                          final trip = ref.watch(tripProvider(_selectedTrip!));
                          return trip.when(
                            data: (tripData) {
                              if (tripData == null) return const Text('Trip not found');
                              return _buildMemberSelection(tripData);
                            },
                            loading: () => const LinearProgressIndicator(),
                            error: (_, __) => const Text('Error loading trip members'),
                          );
                        },
                      )
                    else
                      Container(
                        padding: const EdgeInsets.all(DesignTokens.spacing16),
                        decoration: BoxDecoration(
                          color: Colors.grey.shade100,
                          borderRadius: BorderRadius.circular(DesignTokens.borderRadius8),
                        ),
                        child: const Center(
                          child: Text(
                            'Select a trip first to choose members',
                            style: TextStyle(color: Colors.grey),
                          ),
                        ),
                      ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Notes Field (Optional)
            AnimatedInputField(
              controller: _notesController,
              labelText: 'Notes (Optional)',
              hintText: 'Additional notes about this expense',
              prefixIcon: Icons.note,
              maxLines: 3,
              textInputAction: TextInputAction.done,
            ),
            const SizedBox(height: DesignTokens.spacing16),

            // Receipt Upload Section
            AnimatedCard(
              child: Padding(
                padding: const EdgeInsets.all(DesignTokens.spacing16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.receipt, color: DesignTokens.primaryColor),
                        const SizedBox(width: DesignTokens.spacing8),
                        Text(
                          'Receipt (Optional)',
                          style: DesignTokens.headingSmall,
                        ),
                      ],
                    ),
                    const SizedBox(height: DesignTokens.spacing16),
                    if (_receiptImage != null) ...[
                      Container(
                        width: double.infinity,
                        height: 200,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(DesignTokens.borderRadius8),
                          image: DecorationImage(
                            image: FileImage(_receiptImage!),
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                      const SizedBox(height: DesignTokens.spacing12),
                      Row(
                        children: [
                          Expanded(
                            child: OutlinedButton.icon(
                              onPressed: _showImagePickerOptions,
                              icon: const Icon(Icons.edit),
                              label: const Text('Change Receipt'),
                            ),
                          ),
                          const SizedBox(width: DesignTokens.spacing8),
                          OutlinedButton(
                            onPressed: () {
                              setState(() {
                                _receiptImage = null;
                              });
                            },
                            child: const Icon(Icons.delete),
                          ),
                        ],
                      ),
                    ] else ...[
                      OutlinedButton.icon(
                        onPressed: _showImagePickerOptions,
                        icon: const Icon(Icons.camera_alt),
                        label: const Text('Add Receipt'),
                        style: OutlinedButton.styleFrom(
                          minimumSize: const Size(double.infinity, 48),
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),
            const SizedBox(height: DesignTokens.spacing32),

            // Submit Button
            AnimatedButton(
              onPressed: _isLoading ? null : _handleSubmit,
              isLoading: _isLoading,
              child: const Text(
                'Add Expense',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMemberSelection(Trip trip) {
    return Column(
      children: [
        // Equal split option
        CheckboxListTile(
          title: const Text('Split equally among all members'),
          value: _splitBetween.isEmpty,
          onChanged: (value) {
            if (value == true) {
              setState(() {
                _splitBetween.clear();
                _selectedMembers.clear();
              });
            }
          },
        ),
        const Divider(),
        // Custom split options
        Text(
          'Or select specific members:',
          style: DesignTokens.bodyMedium.copyWith(
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: DesignTokens.spacing8),
        // TODO: Replace with actual trip members when available
        ...['Member 1', 'Member 2', 'Member 3', 'Member 4'].map((member) {
          final isSelected = _selectedMembers.contains(member);
          return CheckboxListTile(
            title: Text(member),
            subtitle: isSelected && _splitBetween.containsKey(member)
                ? Text('Amount: \$${_splitBetween[member]?.toStringAsFixed(2) ?? '0.00'}')
                : null,
            value: isSelected,
            onChanged: (value) {
              setState(() {
                if (value == true) {
                  _selectedMembers.add(member);
                  // Auto-calculate equal split
                  final amount = double.tryParse(_amountController.text) ?? 0.0;
                  final splitAmount = amount / (_selectedMembers.length);
                  for (final selectedMember in _selectedMembers) {
                    _splitBetween[selectedMember] = splitAmount;
                  }
                } else {
                  _selectedMembers.remove(member);
                  _splitBetween.remove(member);
                  // Recalculate split for remaining members
                  if (_selectedMembers.isNotEmpty) {
                    final amount = double.tryParse(_amountController.text) ?? 0.0;
                    final splitAmount = amount / (_selectedMembers.length);
                    for (final selectedMember in _selectedMembers) {
                      _splitBetween[selectedMember] = splitAmount;
                    }
                  }
                }
              });
            },
          );
        }).toList(),
      ],
    );
  }

  List<Map<String, dynamic>> _getCategories() {
    return [
      {'id': 'food', 'name': 'Food & Dining', 'icon': Icons.restaurant},
      {'id': 'transport', 'name': 'Transportation', 'icon': Icons.directions_car},
      {'id': 'accommodation', 'name': 'Accommodation', 'icon': Icons.hotel},
      {'id': 'entertainment', 'name': 'Entertainment', 'icon': Icons.movie},
      {'id': 'shopping', 'name': 'Shopping', 'icon': Icons.shopping_bag},
      {'id': 'fuel', 'name': 'Fuel', 'icon': Icons.local_gas_station},
      {'id': 'medical', 'name': 'Medical', 'icon': Icons.medical_services},
      {'id': 'groceries', 'name': 'Groceries', 'icon': Icons.local_grocery_store},
      {'id': 'activities', 'name': 'Activities', 'icon': Icons.local_activity},
      {'id': 'tips', 'name': 'Tips & Service', 'icon': Icons.thumb_up},
      {'id': 'other', 'name': 'Other', 'icon': Icons.more_horiz},
    ];
  }
}
